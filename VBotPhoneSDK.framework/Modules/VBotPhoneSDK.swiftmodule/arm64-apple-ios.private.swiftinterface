// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 effective-4.1.50 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.5 -enable-objc-interop -enable-library-evolution -swift-version 4 -enforce-exclusivity=checked -O -module-name VBotPhoneSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVKit
import CallKit
import CocoaLumberjack
import CoreTelephony
import Foundation
import PushKit
import SQLite3
import Swift
import SystemConfiguration
import UserNotifications
@_exported import VBotPhoneSDK
import VBotSIP
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct VBotHotline : Swift.Codable {
  public let name: Swift.String, phoneNumber: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class NetworkReachabilityManager {
  public enum NetworkReachabilityStatus {
    case unknown
    case notReachable
    case reachable(VBotPhoneSDK.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType)
    public enum ConnectionType {
      case ethernetOrWiFi
      case cellular
      public static func == (a: VBotPhoneSDK.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType, b: VBotPhoneSDK.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public typealias Listener = (VBotPhoneSDK.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Void
  public static let `default`: VBotPhoneSDK.NetworkReachabilityManager?
  open var isReachable: Swift.Bool {
    get
  }
  open var isReachableOnCellular: Swift.Bool {
    get
  }
  open var isReachableOnEthernetOrWiFi: Swift.Bool {
    get
  }
  final public let reachabilityQueue: Dispatch.DispatchQueue
  open var flags: SystemConfiguration.SCNetworkReachabilityFlags? {
    get
  }
  open var status: VBotPhoneSDK.NetworkReachabilityManager.NetworkReachabilityStatus {
    get
  }
  convenience public init?(host: Swift.String)
  convenience public init?()
  @objc deinit
  @discardableResult
  open func startListening(onQueue queue: Dispatch.DispatchQueue = .main, onUpdatePerforming listener: @escaping VBotPhoneSDK.NetworkReachabilityManager.Listener) -> Swift.Bool
  open func stopListening()
}
extension VBotPhoneSDK.NetworkReachabilityManager.NetworkReachabilityStatus : Swift.Equatable {
  public static func == (a: VBotPhoneSDK.NetworkReachabilityManager.NetworkReachabilityStatus, b: VBotPhoneSDK.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Bool
}
public protocol VBotPhoneDelegate {
  func callAccepted()
  func callHungup()
  func callStateChanged(call: VBotSIP.VBotCall)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VBotPhone : ObjectiveC.NSObject {
  public static let sharedInstance: VBotPhoneSDK.VBotPhone
  public var audioOutput: VBotSIP.VBotAudioControllerOutputs?
  public var voIPPushPayload: VBotPhoneSDK.VoIPPushPayload?
  public var callName: Swift.String
  public func setup(delegate: any VBotPhoneSDK.VBotPhoneDelegate)
  public func connect(token: Swift.String, completion: @escaping (Swift.String?, (any Swift.Error)?) -> Swift.Void)
  public func disconnect(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func isUserConnected() -> Swift.Bool
  public func userDisplayName() -> Swift.String?
  public func userToken() -> Swift.String?
  public func getHotlines(completion: @escaping ([VBotPhoneSDK.VBotHotline]?, (any Swift.Error)?) -> Swift.Void)
  public func readyForIncomingCall()
  public func disconnectSocket()
  public func sendCallState(method: VBotPhoneSDK.SocketMethod, message: Swift.String?)
  @objc deinit
}
extension VBotPhoneSDK.VBotPhone {
  public func createError(description: Swift.String) -> Foundation.NSError
  public func startCall(hotline: Swift.String, phoneNumber: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func getActiveCall() -> VBotSIP.VBotCall?
  public func endCall(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func muteCall(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func hasAudioBluetooth() -> Swift.Bool
  public func isSpeakerOn() -> Swift.Bool
  public func onOffSpeaker()
  public func holdCall(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func isCallHold() -> Swift.Bool
  public func isCallMute() -> Swift.Bool
  public func sendDTMF(digit: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
}
public enum VBotReachabilityError : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
}
@objc public class VBotReachability : ObjectiveC.NSObject {
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable
    case reachableViaWiFi
    case reachableVia2G
    case reachableVia3G
    case reachableVia4G
    public var description: Swift.String {
      get
    }
    public static func == (a: VBotPhoneSDK.VBotReachability.NetworkStatus, b: VBotPhoneSDK.VBotReachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias NetworkChanged = (VBotPhoneSDK.VBotReachability) -> ()
  public var whenConnectionChanged: VBotPhoneSDK.VBotReachability.NetworkChanged?
  public var onWWAN: Swift.Bool
  @objc public var hasHighSpeed: Swift.Bool {
    @objc get
  }
  @objc public var statusString: Swift.String {
    @objc get
  }
  @objc public var carrierName: Swift.String? {
    @objc get
  }
  public var status: VBotPhoneSDK.VBotReachability.NetworkStatus {
    get
  }
  public var radioStatus: VBotPhoneSDK.VBotReachability.NetworkStatus? {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability)
  convenience public init?(hostname: Swift.String)
  convenience public init?(_: Swift.Bool)
  @objc deinit
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
extension VBotPhoneSDK.VBotReachability {
  public func startNotifier() throws
  public func stopNotifier()
}
@_hasMissingDesignatedInitializers public class VBotReachabilityHelper {
  @objc deinit
}
extension VBotSIP.VBotSIP {
  public func hasActiveCall() -> Swift.Bool
}
public enum SocketMethod : Swift.String, Swift.CaseIterable {
  case READY_CALL
  case UN_READY_CALL
  public init?(rawValue: Swift.String)
  public typealias AllCases = [VBotPhoneSDK.SocketMethod]
  public typealias RawValue = Swift.String
  public static var allCases: [VBotPhoneSDK.SocketMethod] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension VBotSIP.VBotCallState {
  public func stringValue() -> Swift.String
}
public struct VoIPPushPayload {
}
extension VBotPhoneSDK.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType : Swift.Equatable {}
extension VBotPhoneSDK.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType : Swift.Hashable {}
extension VBotPhoneSDK.VBotReachability.NetworkStatus : Swift.Equatable {}
extension VBotPhoneSDK.VBotReachability.NetworkStatus : Swift.Hashable {}
extension VBotPhoneSDK.SocketMethod : Swift.Equatable {}
extension VBotPhoneSDK.SocketMethod : Swift.Hashable {}
extension VBotPhoneSDK.SocketMethod : Swift.RawRepresentable {}
